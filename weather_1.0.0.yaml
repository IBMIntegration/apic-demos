swagger: '2.0'
info:
  title: Weather
  x-ibm-name: weather
  version: 1.0.0
schemes:
  - https
basePath: /weather
security:
  - clientID: []
    clientSecret: []
securityDefinitions:
  clientSecret:
    type: apiKey
    name: x-ibm-client-secret
    in: header
    x-key-type: client_secret
  clientID:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
x-ibm-configuration:
  cors:
    enabled: true
  gateway: datapower-api-gateway
  type: rest
  phase: realized
  enforced: true
  testable: true
  assembly:
    execute:
      - map:
          version: 2.0.0
          title: 'GetCityWeatherByZIP: input'
          inputs: {}
          outputs:
            body:
              schema:
                $ref: >-
                  #/x-ibm-configuration/targets/Weather/definitions/GetCityWeatherByZIPInput
              variable: message.body
              content: application/xml
            content-type:
              schema:
                type: string
              variable: message.headers.content-type
            SOAPAction:
              schema:
                type: string
              variable: message.headers.SOAPAction
          actions:
            - set: content-type
              default: text/xml
            - set: SOAPAction
              default: 'http://ws.cdyne.com/WeatherWS/GetCityWeatherByZIP'
      - invoke:
          version: 2.0.0
          title: 'GetCityWeatherByZIP: invoke'
          target-url: ''
          timeout: 60
          verb: POST
          cache-response: protocol
          cache-ttl: 900
          stop-on-error:
            - ConnectionError
            - OperationError
          output: GetCityWeatherByZIPOut
      - parse:
          version: 2.0.0
          title: 'GetCityWeatherByZIP: output parse'
          parse-settings-reference:
            default: apic-default-parsesettings
          input: GetCityWeatherByZIPOut
          output: GetCityWeatherByZIPOut
      - map:
          version: 2.0.0
          title: 'GetCityWeatherByZIP: output'
          inputs:
            input:
              schema:
                $ref: >-
                  #/x-ibm-configuration/targets/Weather/definitions/GetCityWeatherByZIPOutput
              variable: GetCityWeatherByZIPOut.body
              content: application/xml
          outputs: {}
          actions: []
  properties:
    target-url:
      value: 'http://example.com/operation-name'
      description: The URL of the target service
      encoded: false
  targets:
    Weather:
      swagger: '2.0'
      info:
        title: Weather
        description: ''
        x-ibm-name: weather
        version: 1.0.0
      schemes:
        - https
      basePath: /Weather
      produces:
        - application/xml
      consumes:
        - text/xml
      securityDefinitions:
        clientID:
          type: apiKey
          name: X-IBM-Client-Id
          in: header
          description: ''
      security:
        - clientID: []
      x-ibm-configuration:
        type: wsdl
        phase: realized
        enforced: true
        testable: true
        gateway: datapower-api-gateway
        cors:
          enabled: true
        wsdl-definition:
          wsdl: Weather
          service: Weather
          port: WeatherSoap
          soap-version: '1.1'
        assembly:
          execute:
            - invoke:
                title: invoke
                target-url: 'http://wsf.cdyne.com/WeatherWS/Weather.asmx'
                version: 2.0.0
        x-ibm-apiconnect-wsdl:
          package-version: 1.8.20
          options: {}
          messages:
            info:
              - message: >-
                  The wsdl 'service' has multiple 'ports'. The api is generated
                  using information in the first soap 'port'.
            warning: []
            error: []
      paths:
        /GetWeatherInformation:
          post:
            summary: Operation GetWeatherInformation
            description: Gets Information for each WeatherID
            operationId: GetWeatherInformation
            x-ibm-soap:
              soap-action: 'http://ws.cdyne.com/WeatherWS/GetWeatherInformation'
              soap-operation: '{http://ws.cdyne.com/WeatherWS/}GetWeatherInformation'
            parameters:
              - in: body
                name: body
                required: true
                schema:
                  $ref: >-
                    #/x-ibm-configuration/targets/Weather/definitions/GetWeatherInformationInput
            responses:
              default:
                description: ''
                schema:
                  $ref: >-
                    #/x-ibm-configuration/targets/Weather/definitions/GetWeatherInformationOutput
        /GetCityForecastByZIP:
          post:
            summary: Operation GetCityForecastByZIP
            description: >-
              Allows you to get your City Forecast Over the Next 7 Days, which
              is updated hourly. U.S. Only
            operationId: GetCityForecastByZIP
            x-ibm-soap:
              soap-action: 'http://ws.cdyne.com/WeatherWS/GetCityForecastByZIP'
              soap-operation: '{http://ws.cdyne.com/WeatherWS/}GetCityForecastByZIP'
            parameters:
              - in: body
                name: body
                required: true
                schema:
                  $ref: >-
                    #/x-ibm-configuration/targets/Weather/definitions/GetCityForecastByZIPInput
            responses:
              default:
                description: ''
                schema:
                  $ref: >-
                    #/x-ibm-configuration/targets/Weather/definitions/GetCityForecastByZIPOutput
        /GetCityWeatherByZIP:
          post:
            summary: Operation GetCityWeatherByZIP
            description: >-
              Allows you to get your City's Weather, which is updated hourly.
              U.S. Only
            operationId: GetCityWeatherByZIP
            x-ibm-soap:
              soap-action: 'http://ws.cdyne.com/WeatherWS/GetCityWeatherByZIP'
              soap-operation: '{http://ws.cdyne.com/WeatherWS/}GetCityWeatherByZIP'
            parameters:
              - in: body
                name: body
                required: true
                schema:
                  $ref: >-
                    #/x-ibm-configuration/targets/Weather/definitions/GetCityWeatherByZIPInput
            responses:
              default:
                description: ''
                schema:
                  $ref: >-
                    #/x-ibm-configuration/targets/Weather/definitions/GetCityWeatherByZIPOutput
      definitions:
        Security:
          xml:
            namespace: >-
              http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd
            prefix: wsse
          description: Header for WS-Security
          type: object
          properties:
            UsernameToken:
              xml:
                namespace: >-
                  http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd
                prefix: wsse
              type: object
              properties:
                Username:
                  xml:
                    namespace: >-
                      http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd
                    prefix: wsse
                  type: string
                Password:
                  xml:
                    namespace: >-
                      http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd
                    prefix: wsse
                  type: string
                Nonce:
                  xml:
                    namespace: >-
                      http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd
                    prefix: wsse
                  type: string
                  properties:
                    EncodingType:
                      xml:
                        namespace: ''
                        attribute: true
                      type: string
                Created:
                  xml:
                    namespace: >-
                      http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd
                    prefix: wsu
                  type: string
            Timestamp:
              xml:
                namespace: >-
                  http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd
                prefix: wsu
              type: object
              properties:
                Created:
                  xml:
                    namespace: >-
                      http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd
                    prefix: wsu
                  type: string
                Expires:
                  xml:
                    namespace: >-
                      http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd
                    prefix: wsu
                  type: string
                Id:
                  xml:
                    namespace: >-
                      http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd
                    prefix: wsu
                    attribute: true
                  type: string
        GetWeatherInformationInput:
          description: Input message for wsdl operation GetWeatherInformation
          type: object
          properties:
            Envelope:
              xml:
                namespace: 'http://schemas.xmlsoap.org/soap/envelope/'
                prefix: soapenv
              type: object
              properties:
                Header:
                  $ref: >-
                    #/x-ibm-configuration/targets/Weather/definitions/GetWeatherInformationHeader
                Body:
                  xml:
                    namespace: 'http://schemas.xmlsoap.org/soap/envelope/'
                    prefix: soapenv
                  type: object
                  properties:
                    GetWeatherInformation:
                      $ref: >-
                        #/x-ibm-configuration/targets/Weather/definitions/GetWeatherInformation_element_tns
                  required:
                    - GetWeatherInformation
              required:
                - Body
          required:
            - Envelope
          x-ibm-schema:
            wsdl-port: '{http://ws.cdyne.com/WeatherWS/}WeatherSoap'
            wsdl-operation: GetWeatherInformation
            wsdl-message-direction-or-name: GetWeatherInformationRequest
          example: >-

            <soapenv:Envelope
            xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
             <soapenv:Header>
              <!-- The Security element should be removed if WS-Security is not enabled on the SOAP target-url -->
              <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
               <wsse:UsernameToken>
                <wsse:Username>string</wsse:Username>
                <wsse:Password>string</wsse:Password>
                <wsse:Nonce EncodingType="string">string</wsse:Nonce>
                <wsu:Created>string</wsu:Created>
               </wsse:UsernameToken>
               <wsu:Timestamp wsu:Id="string">
                <wsu:Created>string</wsu:Created>
                <wsu:Expires>string</wsu:Expires>
               </wsu:Timestamp>
              </wsse:Security>
             </soapenv:Header>
             <soapenv:Body>
              <tns:GetWeatherInformation xmlns:tns="http://ws.cdyne.com/WeatherWS/"><!-- mandatory --></tns:GetWeatherInformation>
             </soapenv:Body>
            </soapenv:Envelope>
        GetWeatherInformationHeader:
          description: Input headers for wsdl operation GetWeatherInformation
          type: object
          properties:
            Security:
              $ref: '#/x-ibm-configuration/targets/Weather/definitions/Security'
        GetWeatherInformationOutput:
          description: Output message for wsdl operation GetWeatherInformation
          type: object
          properties:
            Envelope:
              xml:
                namespace: 'http://schemas.xmlsoap.org/soap/envelope/'
                prefix: soapenv
              type: object
              properties:
                Body:
                  xml:
                    namespace: 'http://schemas.xmlsoap.org/soap/envelope/'
                    prefix: soapenv
                  type: object
                  properties:
                    GetWeatherInformationResponse:
                      $ref: >-
                        #/x-ibm-configuration/targets/Weather/definitions/GetWeatherInformationResponse_element_tns
              required:
                - Body
          required:
            - Envelope
          x-ibm-schema:
            wsdl-port: '{http://ws.cdyne.com/WeatherWS/}WeatherSoap'
            wsdl-operation: GetWeatherInformation
            wsdl-message-direction-or-name: GetWeatherInformationResponse
          example: >-

            <soapenv:Envelope
            xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
             <soapenv:Body>
              <tns:GetWeatherInformationResponse xmlns:tns="http://ws.cdyne.com/WeatherWS/">
               <tns:GetWeatherInformationResult>
                <tns:WeatherDescription><!-- between zero and unlimited repetitions of this element -->
                 <tns:WeatherID><!-- mandatory -->3</tns:WeatherID>
                 <tns:Description>string</tns:Description>
                 <tns:PictureURL>string</tns:PictureURL>
                </tns:WeatherDescription>
               </tns:GetWeatherInformationResult>
              </tns:GetWeatherInformationResponse>
             </soapenv:Body>
            </soapenv:Envelope>
        GetCityForecastByZIPInput:
          description: Input message for wsdl operation GetCityForecastByZIP
          type: object
          properties:
            Envelope:
              xml:
                namespace: 'http://schemas.xmlsoap.org/soap/envelope/'
                prefix: soapenv
              type: object
              properties:
                Header:
                  $ref: >-
                    #/x-ibm-configuration/targets/Weather/definitions/GetCityForecastByZIPHeader
                Body:
                  xml:
                    namespace: 'http://schemas.xmlsoap.org/soap/envelope/'
                    prefix: soapenv
                  type: object
                  properties:
                    GetCityForecastByZIP:
                      $ref: >-
                        #/x-ibm-configuration/targets/Weather/definitions/GetCityForecastByZIP_element_tns
                  required:
                    - GetCityForecastByZIP
              required:
                - Body
          required:
            - Envelope
          x-ibm-schema:
            wsdl-port: '{http://ws.cdyne.com/WeatherWS/}WeatherSoap'
            wsdl-operation: GetCityForecastByZIP
            wsdl-message-direction-or-name: GetCityForecastByZIPRequest
          example: >-

            <soapenv:Envelope
            xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
             <soapenv:Header>
              <!-- The Security element should be removed if WS-Security is not enabled on the SOAP target-url -->
              <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
               <wsse:UsernameToken>
                <wsse:Username>string</wsse:Username>
                <wsse:Password>string</wsse:Password>
                <wsse:Nonce EncodingType="string">string</wsse:Nonce>
                <wsu:Created>string</wsu:Created>
               </wsse:UsernameToken>
               <wsu:Timestamp wsu:Id="string">
                <wsu:Created>string</wsu:Created>
                <wsu:Expires>string</wsu:Expires>
               </wsu:Timestamp>
              </wsse:Security>
             </soapenv:Header>
             <soapenv:Body>
              <tns:GetCityForecastByZIP xmlns:tns="http://ws.cdyne.com/WeatherWS/"><!-- mandatory -->
               <tns:ZIP>string</tns:ZIP>
              </tns:GetCityForecastByZIP>
             </soapenv:Body>
            </soapenv:Envelope>
        GetCityForecastByZIPHeader:
          description: Input headers for wsdl operation GetCityForecastByZIP
          type: object
          properties:
            Security:
              $ref: '#/x-ibm-configuration/targets/Weather/definitions/Security'
        GetCityForecastByZIPOutput:
          description: Output message for wsdl operation GetCityForecastByZIP
          type: object
          properties:
            Envelope:
              xml:
                namespace: 'http://schemas.xmlsoap.org/soap/envelope/'
                prefix: soapenv
              type: object
              properties:
                Body:
                  xml:
                    namespace: 'http://schemas.xmlsoap.org/soap/envelope/'
                    prefix: soapenv
                  type: object
                  properties:
                    GetCityForecastByZIPResponse:
                      $ref: >-
                        #/x-ibm-configuration/targets/Weather/definitions/GetCityForecastByZIPResponse_element_tns
              required:
                - Body
          required:
            - Envelope
          x-ibm-schema:
            wsdl-port: '{http://ws.cdyne.com/WeatherWS/}WeatherSoap'
            wsdl-operation: GetCityForecastByZIP
            wsdl-message-direction-or-name: GetCityForecastByZIPResponse
          example: >-

            <soapenv:Envelope
            xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
             <soapenv:Body>
              <tns:GetCityForecastByZIPResponse xmlns:tns="http://ws.cdyne.com/WeatherWS/">
               <tns:GetCityForecastByZIPResult>
                <tns:Success><!-- mandatory -->true</tns:Success>
                <tns:ResponseText>string</tns:ResponseText>
                <tns:State>string</tns:State>
                <tns:City>string</tns:City>
                <tns:WeatherStationCity>string</tns:WeatherStationCity>
                <tns:ForecastResult>
                 <tns:Forecast><!-- between zero and unlimited repetitions of this element -->
                  <tns:Date><!-- mandatory -->2016-04-18T14:07:37</tns:Date>
                  <tns:WeatherID><!-- mandatory -->3</tns:WeatherID>
                  <tns:Desciption>string</tns:Desciption>
                  <tns:Temperatures><!-- mandatory -->
                   <tns:MorningLow>string</tns:MorningLow>
                   <tns:DaytimeHigh>string</tns:DaytimeHigh>
                  </tns:Temperatures>
                  <tns:ProbabilityOfPrecipiation><!-- mandatory -->
                   <tns:Nighttime>string</tns:Nighttime>
                   <tns:Daytime>string</tns:Daytime>
                  </tns:ProbabilityOfPrecipiation>
                 </tns:Forecast>
                </tns:ForecastResult>
               </tns:GetCityForecastByZIPResult>
              </tns:GetCityForecastByZIPResponse>
             </soapenv:Body>
            </soapenv:Envelope>
        GetCityWeatherByZIPInput:
          description: Input message for wsdl operation GetCityWeatherByZIP
          type: object
          properties:
            Envelope:
              xml:
                namespace: 'http://schemas.xmlsoap.org/soap/envelope/'
                prefix: soapenv
              type: object
              properties:
                Header:
                  $ref: >-
                    #/x-ibm-configuration/targets/Weather/definitions/GetCityWeatherByZIPHeader
                Body:
                  xml:
                    namespace: 'http://schemas.xmlsoap.org/soap/envelope/'
                    prefix: soapenv
                  type: object
                  properties:
                    GetCityWeatherByZIP:
                      $ref: >-
                        #/x-ibm-configuration/targets/Weather/definitions/GetCityWeatherByZIP_element_tns
                  required:
                    - GetCityWeatherByZIP
              required:
                - Body
          required:
            - Envelope
          x-ibm-schema:
            wsdl-port: '{http://ws.cdyne.com/WeatherWS/}WeatherSoap'
            wsdl-operation: GetCityWeatherByZIP
            wsdl-message-direction-or-name: GetCityWeatherByZIPRequest
          example: >-

            <soapenv:Envelope
            xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
             <soapenv:Header>
              <!-- The Security element should be removed if WS-Security is not enabled on the SOAP target-url -->
              <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
               <wsse:UsernameToken>
                <wsse:Username>string</wsse:Username>
                <wsse:Password>string</wsse:Password>
                <wsse:Nonce EncodingType="string">string</wsse:Nonce>
                <wsu:Created>string</wsu:Created>
               </wsse:UsernameToken>
               <wsu:Timestamp wsu:Id="string">
                <wsu:Created>string</wsu:Created>
                <wsu:Expires>string</wsu:Expires>
               </wsu:Timestamp>
              </wsse:Security>
             </soapenv:Header>
             <soapenv:Body>
              <tns:GetCityWeatherByZIP xmlns:tns="http://ws.cdyne.com/WeatherWS/"><!-- mandatory -->
               <tns:ZIP>string</tns:ZIP>
              </tns:GetCityWeatherByZIP>
             </soapenv:Body>
            </soapenv:Envelope>
        GetCityWeatherByZIPHeader:
          description: Input headers for wsdl operation GetCityWeatherByZIP
          type: object
          properties:
            Security:
              $ref: '#/x-ibm-configuration/targets/Weather/definitions/Security'
        GetCityWeatherByZIPOutput:
          description: Output message for wsdl operation GetCityWeatherByZIP
          type: object
          properties:
            Envelope:
              xml:
                namespace: 'http://schemas.xmlsoap.org/soap/envelope/'
                prefix: soapenv
              type: object
              properties:
                Body:
                  xml:
                    namespace: 'http://schemas.xmlsoap.org/soap/envelope/'
                    prefix: soapenv
                  type: object
                  properties:
                    GetCityWeatherByZIPResponse:
                      $ref: >-
                        #/x-ibm-configuration/targets/Weather/definitions/GetCityWeatherByZIPResponse_element_tns
              required:
                - Body
          required:
            - Envelope
          x-ibm-schema:
            wsdl-port: '{http://ws.cdyne.com/WeatherWS/}WeatherSoap'
            wsdl-operation: GetCityWeatherByZIP
            wsdl-message-direction-or-name: GetCityWeatherByZIPResponse
          example: >-

            <soapenv:Envelope
            xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
             <soapenv:Body>
              <tns:GetCityWeatherByZIPResponse xmlns:tns="http://ws.cdyne.com/WeatherWS/">
               <tns:GetCityWeatherByZIPResult><!-- mandatory -->
                <tns:Success><!-- mandatory -->true</tns:Success>
                <tns:ResponseText>string</tns:ResponseText>
                <tns:State>string</tns:State>
                <tns:City>string</tns:City>
                <tns:WeatherStationCity>string</tns:WeatherStationCity>
                <tns:WeatherID><!-- mandatory -->3</tns:WeatherID>
                <tns:Description>string</tns:Description>
                <tns:Temperature>string</tns:Temperature>
                <tns:RelativeHumidity>string</tns:RelativeHumidity>
                <tns:Wind>string</tns:Wind>
                <tns:Pressure>string</tns:Pressure>
                <tns:Visibility>string</tns:Visibility>
                <tns:WindChill>string</tns:WindChill>
                <tns:Remarks>string</tns:Remarks>
               </tns:GetCityWeatherByZIPResult>
              </tns:GetCityWeatherByZIPResponse>
             </soapenv:Body>
            </soapenv:Envelope>
        GetWeatherInformation_element_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
            name: GetWeatherInformation
          type: object
          properties: {}
          example: >-

            <tns:GetWeatherInformation
            xmlns:tns="http://ws.cdyne.com/WeatherWS/">

            </tns:GetWeatherInformation>
        GetWeatherInformationResponse_element_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
            name: GetWeatherInformationResponse
          type: object
          properties:
            GetWeatherInformationResult:
              $ref: >-
                #/x-ibm-configuration/targets/Weather/definitions/ArrayOfWeatherDescription_type_tns
          example: >-

            <tns:GetWeatherInformationResponse
            xmlns:tns="http://ws.cdyne.com/WeatherWS/">
             <tns:GetWeatherInformationResult>
              <tns:WeatherDescription><!-- between zero and unlimited repetitions of this element -->
               <tns:WeatherID><!-- mandatory -->3</tns:WeatherID>
               <tns:Description>string</tns:Description>
               <tns:PictureURL>string</tns:PictureURL>
              </tns:WeatherDescription>
             </tns:GetWeatherInformationResult>
            </tns:GetWeatherInformationResponse>
        GetCityForecastByZIP_element_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
            name: GetCityForecastByZIP
          type: object
          properties:
            ZIP:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
          example: >-

            <tns:GetCityForecastByZIP
            xmlns:tns="http://ws.cdyne.com/WeatherWS/">
             <tns:ZIP>string</tns:ZIP>
            </tns:GetCityForecastByZIP>
        GetCityForecastByZIPResponse_element_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
            name: GetCityForecastByZIPResponse
          type: object
          properties:
            GetCityForecastByZIPResult:
              $ref: >-
                #/x-ibm-configuration/targets/Weather/definitions/ForecastReturn_type_tns
          example: >-

            <tns:GetCityForecastByZIPResponse
            xmlns:tns="http://ws.cdyne.com/WeatherWS/">
             <tns:GetCityForecastByZIPResult>
              <tns:Success><!-- mandatory -->true</tns:Success>
              <tns:ResponseText>string</tns:ResponseText>
              <tns:State>string</tns:State>
              <tns:City>string</tns:City>
              <tns:WeatherStationCity>string</tns:WeatherStationCity>
              <tns:ForecastResult>
               <tns:Forecast><!-- between zero and unlimited repetitions of this element -->
                <tns:Date><!-- mandatory -->2016-04-18T14:07:37</tns:Date>
                <tns:WeatherID><!-- mandatory -->3</tns:WeatherID>
                <tns:Desciption>string</tns:Desciption>
                <tns:Temperatures><!-- mandatory -->
                 <tns:MorningLow>string</tns:MorningLow>
                 <tns:DaytimeHigh>string</tns:DaytimeHigh>
                </tns:Temperatures>
                <tns:ProbabilityOfPrecipiation><!-- mandatory -->
                 <tns:Nighttime>string</tns:Nighttime>
                 <tns:Daytime>string</tns:Daytime>
                </tns:ProbabilityOfPrecipiation>
               </tns:Forecast>
              </tns:ForecastResult>
             </tns:GetCityForecastByZIPResult>
            </tns:GetCityForecastByZIPResponse>
        GetCityWeatherByZIP_element_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
            name: GetCityWeatherByZIP
          type: object
          properties:
            ZIP:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
          example: |-

            <tns:GetCityWeatherByZIP xmlns:tns="http://ws.cdyne.com/WeatherWS/">
             <tns:ZIP>string</tns:ZIP>
            </tns:GetCityWeatherByZIP>
        GetCityWeatherByZIPResponse_element_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
            name: GetCityWeatherByZIPResponse
          type: object
          properties:
            GetCityWeatherByZIPResult:
              $ref: >-
                #/x-ibm-configuration/targets/Weather/definitions/WeatherReturn_type_tns
          required:
            - GetCityWeatherByZIPResult
          example: >-

            <tns:GetCityWeatherByZIPResponse
            xmlns:tns="http://ws.cdyne.com/WeatherWS/">
             <tns:GetCityWeatherByZIPResult><!-- mandatory -->
              <tns:Success><!-- mandatory -->true</tns:Success>
              <tns:ResponseText>string</tns:ResponseText>
              <tns:State>string</tns:State>
              <tns:City>string</tns:City>
              <tns:WeatherStationCity>string</tns:WeatherStationCity>
              <tns:WeatherID><!-- mandatory -->3</tns:WeatherID>
              <tns:Description>string</tns:Description>
              <tns:Temperature>string</tns:Temperature>
              <tns:RelativeHumidity>string</tns:RelativeHumidity>
              <tns:Wind>string</tns:Wind>
              <tns:Pressure>string</tns:Pressure>
              <tns:Visibility>string</tns:Visibility>
              <tns:WindChill>string</tns:WindChill>
              <tns:Remarks>string</tns:Remarks>
             </tns:GetCityWeatherByZIPResult>
            </tns:GetCityWeatherByZIPResponse>
        ArrayOfWeatherDescription_type_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          type: object
          properties:
            WeatherDescription:
              type: array
              items:
                $ref: >-
                  #/x-ibm-configuration/targets/Weather/definitions/WeatherDescription_type_tns
          x-xsi-type: ArrayOfWeatherDescription
          x-xsi-type-xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          x-xsi-type-uniquename: ArrayOfWeatherDescription_type_tns
        ForecastReturn_type_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          type: object
          properties:
            Success:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: boolean
            ResponseText:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            State:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            City:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            WeatherStationCity:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            ForecastResult:
              $ref: >-
                #/x-ibm-configuration/targets/Weather/definitions/ArrayOfForecast_type_tns
          required:
            - Success
          x-xsi-type: ForecastReturn
          x-xsi-type-xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          x-xsi-type-uniquename: ForecastReturn_type_tns
        WeatherReturn_type_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          type: object
          properties:
            Success:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: boolean
            ResponseText:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            State:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            City:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            WeatherStationCity:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            WeatherID:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: integer
              format: int32
              minimum: -32768
              maximum: 32767
            Description:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            Temperature:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            RelativeHumidity:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            Wind:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            Pressure:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            Visibility:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            WindChill:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            Remarks:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
          required:
            - Success
            - WeatherID
          x-xsi-type: WeatherReturn
          x-xsi-type-xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          x-xsi-type-uniquename: WeatherReturn_type_tns
        WeatherDescription_type_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          type: object
          properties:
            WeatherID:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: integer
              format: int32
              minimum: -32768
              maximum: 32767
            Description:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            PictureURL:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
          required:
            - WeatherID
          x-xsi-type: WeatherDescription
          x-xsi-type-xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          x-xsi-type-uniquename: WeatherDescription_type_tns
        ArrayOfForecast_type_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          type: object
          properties:
            Forecast:
              type: array
              items:
                $ref: >-
                  #/x-ibm-configuration/targets/Weather/definitions/Forecast_type_tns
              x-nullable: true
          x-xsi-type: ArrayOfForecast
          x-xsi-type-xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          x-xsi-type-uniquename: ArrayOfForecast_type_tns
        Forecast_type_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          type: object
          properties:
            Date:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
              format: date-time
            WeatherID:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: integer
              format: int32
              minimum: -32768
              maximum: 32767
            Desciption:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            Temperatures:
              $ref: '#/x-ibm-configuration/targets/Weather/definitions/temp_type_tns'
            ProbabilityOfPrecipiation:
              $ref: '#/x-ibm-configuration/targets/Weather/definitions/POP_type_tns'
          required:
            - Date
            - WeatherID
            - Temperatures
            - ProbabilityOfPrecipiation
          x-xsi-type: Forecast
          x-xsi-type-xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          x-xsi-type-uniquename: Forecast_type_tns
        temp_type_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          type: object
          properties:
            MorningLow:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            DaytimeHigh:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
          x-xsi-type: temp
          x-xsi-type-xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          x-xsi-type-uniquename: temp_type_tns
        POP_type_tns:
          xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          type: object
          properties:
            Nighttime:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
            Daytime:
              xml:
                namespace: 'http://ws.cdyne.com/WeatherWS/'
                prefix: tns
              type: string
          x-xsi-type: POP
          x-xsi-type-xml:
            namespace: 'http://ws.cdyne.com/WeatherWS/'
            prefix: tns
          x-xsi-type-uniquename: POP_type_tns
  application-authentication:
    certificate: false
paths:
  /zipcode:
    get:
      responses:
        '200':
          schema:
            type: string
          description: success
